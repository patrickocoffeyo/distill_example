<?php

/**
 * Impliments hook_menu()
 */
function distill_example_menu() {
  $items['distill'] = array(
    'title' => t('Distilled Data'),
    'type' => MENU_CALLBACK,
    'page callback' => 'distill_example_page',
    'access callback' => TRUE
  );
  $items['distill/bad'] = array(
    'title' => t('Distilled Data'),
    'type' => MENU_CALLBACK,
    'page callback' => 'distill_example_page_bad',
    'access callback' => TRUE
  );

  return $items;
}

/**
 * Callback page for distill menu item.
 */
function distill_example_page() {
  // Update this function so that it loads an entity that you would like to test against.
  $entity = node_load(1);
  // Create instance of processor.
  $processor = new DistillTestEntityProcessor();
  // Create instance of Distill.
  $distiller = new Distill('node', $entity, $processor);

  // Specify which fields should be returned.
  $distiller->setField('nid', '_id');
  $distiller->setField('title');
  $distiller->setField('body', 'post');
  $distiller->setField('field_image', 'image');
  $distiller->setField('field_integer', 'number');
  $distiller->setField('field_float', 'float');
  $distiller->setField('field_decimal', 'decimal');
  $distiller->setField('field_list_of_floats', 'floats');
  $distiller->setField('field_list_of_integers', 'integers');
  $distiller->setField('field_list_of_text', 'texts');
  $distiller->setField('field_user_reference', 'user', array(
    'include_fields' => array(
      'name',
      'mail'
    )
  ));
  $distiller->setField('field_entity_reference', 'topic', array(
    'include_fields' => array(
      'title',
      'body'
    )
  ));

  // Output JSON
  return drupal_json_output($distiller->getFieldValues());
  drupal_exit();
}

/**
 * Callback page for distill menu item.
 */
function distill_example_page_bad() {
  $entity = node_load(1);
  return drupal_json_output($entity);
  drupal_exit();
}

/**
 * Defines set of formatting rules.
 * @see DistillTestEntityProcessor
 */
class DistillTestEntityProcessor extends DistillProcessor {
  public function processTextWithSummaryType($wrapper, $index, array $settings) {
    $field_value = $wrapper->value();
    return $field_value['value'];
  }

  public function processBodyField($wrapper, $index, array $settings) {
    return 'hi i am a body field';
  }
}
